
// Build our WAT WebAssembly modules.

const path = require('path');
const fs = require('fs');

function buildBinaryArray(binary) {
    return `"${binary.toString('base64')}"`;
}

function buildModuleExportsInterface(exportName, wasmModule) {
    const modExports = WebAssembly.Module.exports(wasmModule);

    function getModuleExportType(exp) {
        switch (exp.kind) {
        case 'global':
            return `number`;
        case 'memory':
            return `WebAssembly.Memory`;
        case 'table':
            return `WebAssembly.Table`;
        default:
            throw "whoops";
        }
    }

    const lines = [];
    lines.push(`export interface ${exportName}Exports {`);
    for (const exp of modExports) {
        // For now, consumers are expected to provide signatures,
        // until this information is available through the toolchain...
        if (exp.kind === 'function')
            continue;
        lines.push(`    ${exp.name}: ${getModuleExportType(exp)};`);
    }
    lines.push('}');
    return lines.join('\n');
}

function buildModuleCode(mod) {
    const exportName = mod.exportName;
    const filename = mod.filename;
    const wasmFilename = filename.replace('.ts', '.wasm');
    const binary = fs.readFileSync(path.join(__dirname, wasmFilename));
    if (!WebAssembly.validate(binary)) {
      throw new Error(`invalid wasm module "${ wasmFilename }"`);
    }
    const wasmModule = new WebAssembly.Module(binary);
    buildModuleExportsInterface(exportName, wasmModule);

    const binArrayStr = buildBinaryArray(binary);

    return `
// ${filename}
${buildModuleExportsInterface(exportName, wasmModule)}
const ${exportName}Code = ${binArrayStr};
export function ${exportName}Instance(imports?: any): Promise<${exportName}Exports> {
    return WebAssembly.compile(Uint8Array.from(window.atob(${exportName}Code), function(c) { return c.charCodeAt(0); })).then((module: WebAssembly.Module) => {
        return WebAssembly.instantiate(module, imports);
    }).then((instance: WebAssembly.Instance) => {
        return (instance.exports as unknown) as ${exportName}Exports;
    });
}
`;
}

function buildModulesFile(modules) {
    let s = `// Generated by build_wat.js\n`;
    for (const module of modules) {
        s += buildModuleCode(module);
    }
    return s;
}

function main() {
    const out = buildModulesFile([
        { exportName: 'yaz0_as', filename: 'assembly/Yaz0_as.ts' },
        { exportName: 'gx_texture_as', filename: 'assembly/gx_texture_as.ts' },
    ]);
    fs.writeFileSync(path.join(__dirname, 'wat_modules.ts'), out);
}

main();
